{"version":3,"sources":["serviceWorker.ts","Assets/Logo.tsx","Assets/CircleForm.svg","Assets/PhoneMapCircle.svg","Components/Homepage/Homepage.tsx","Components/Button.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Logo","viewBox","xmlns","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","style","height","d","fill","Homepage","className","title","variant","color","textColor","src","Circle","alt","width","City","paddingTop","Button","textSize","onClick","useState","hovered","setHovered","role","onMouseEnter","onMouseLeave","border","backgroundColor","padding","fontSize","defaultProps","ReactDOM","render","basename","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d98ce3f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. HomepageV0 is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import * as React from \"react\";\n\nconst Logo = () => {\n    return (\n        <svg\n            viewBox=\"0 0 89 28\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fillRule=\"evenodd\"\n            clipRule=\"evenodd\"\n            strokeLinejoin=\"round\"\n            strokeMiterlimit={2}\n            style={{ height: \"27px\" }}\n        >\n            <path\n                d=\"M34.276 21.812l-1.064-3.534H28.25l-1.064 3.534h-3.28L28.804 6.95h4.003l4.834 14.862h-3.365zM30.763 9.888h-.107l-1.64 5.643h3.408l-1.661-5.643zM38.45 21.812l3.684-5.685-3.642-5.494h3.578l2.086 3.514h.086l2.022-3.514h3.322l-3.705 5.6 3.727 5.58H46.03l-2.15-3.642h-.086l-2.065 3.641h-3.28zM53.036 9.44c-.639 0-1.107-.148-1.384-.446-.298-.277-.447-.66-.447-1.108v-.468c0-.447.149-.83.447-1.129.277-.276.745-.425 1.384-.425.639 0 1.107.149 1.405.425.277.299.426.682.426 1.129v.468c0 .448-.15.83-.426 1.108-.298.298-.766.447-1.405.447zm-1.576 1.193h3.151v11.18H51.46v-11.18zM60.68 21.812c-1.086 0-1.874-.255-2.363-.787-.512-.533-.767-1.278-.767-2.279V6.056h3.151v13.308h1.406v2.448H60.68zM65.578 9.44c-.64 0-1.108-.148-1.385-.446-.298-.277-.447-.66-.447-1.108v-.468c0-.447.15-.83.447-1.129.277-.276.746-.425 1.385-.425.638 0 1.107.149 1.405.425.277.299.426.682.426 1.129v.468c0 .448-.15.83-.426 1.108-.298.298-.767.447-1.405.447zm-1.576 1.193h3.151v11.18h-3.151v-11.18zM74.755 22.068c-.852 0-1.618-.15-2.278-.426-.66-.277-1.235-.66-1.683-1.171-.468-.49-.809-1.107-1.043-1.831a7.854 7.854 0 01-.362-2.428c0-.873.107-1.682.34-2.406a5.298 5.298 0 011.023-1.831 4.66 4.66 0 011.64-1.193c.66-.276 1.405-.404 2.235-.404.916 0 1.725.149 2.385.468.66.32 1.193.724 1.597 1.257.426.532.724 1.128.937 1.81a8.21 8.21 0 01.277 2.171v.937h-7.176v.17c0 .725.192 1.32.596 1.747.405.426 1.022.639 1.874.639.66 0 1.192-.128 1.597-.384a7.908 7.908 0 001.15-.937l1.576 1.96c-.49.574-1.15 1.043-1.938 1.362-.81.32-1.725.49-2.747.49zm-.064-9.37c-.639 0-1.128.214-1.49.618-.362.426-.554.98-.554 1.682v.17h3.918v-.19c0-.682-.15-1.236-.447-1.662-.32-.404-.788-.617-1.427-.617zM82.059 21.812V10.633h3.151v2.428h.107c.063-.32.149-.618.298-.916.149-.277.34-.532.575-.766.234-.235.51-.405.83-.554.32-.128.703-.192 1.15-.192h.553v2.939h-.787c-.916 0-1.597.128-2.045.362-.447.234-.681.681-.681 1.341v6.537h-3.151z\"\n                fill=\"#1e4ee5\"\n                fillRule=\"nonzero\"\n            />\n            <g>\n                <path\n                    d=\"M9.31 0l9.31 9.31-9.31 9.31L0 9.31 9.31 0z\"\n                    fill=\"#053fff\"\n                />\n                <path\n                    d=\"M9.31 4.404l9.31 9.31-9.31 9.311L0 13.715l9.31-9.31z\"\n                    fill=\"#055eff\"\n                />\n                <path\n                    d=\"M9.31 9.31l9.31 9.31-9.31 9.311L0 18.621l9.31-9.31z\"\n                    fill=\"#057eff\"\n                />\n            </g>\n        </svg>\n    );\n};\n\nexport default Logo;\n","export default __webpack_public_path__ + \"static/media/CircleForm.5687544a.svg\";","export default __webpack_public_path__ + \"static/media/PhoneMapCircle.16ff1356.svg\";","// @flow\nimport * as React from \"react\";\nimport Logo from \"../../Assets/Logo\";\nimport \"../../Css/Homescreen.css\";\nimport { Button } from \"../index\";\nimport Circle from \"../../Assets/CircleForm.svg\";\nimport City from \"../../Assets/PhoneMapCircle.svg\";\n\nconst Homepage = () => {\n    return (\n        <>\n            <div className={\"top-bar\"}>\n                <Logo />\n                <div className={\"top-bar-item\"}>\n                    <Button title={\"Product\"} variant={\"Text\"} />\n                    <Button title={\"Resources\"} variant={\"Text\"} />\n                    <Button title={\"Contact\"} variant={\"Text\"} />\n                </div>\n                <div className={\"top-bar-item\"}>\n                    <Button\n                        title={\"Sign Up\"}\n                        variant={\"Outlined\"}\n                        color={\"#053FFF\"}\n                        textColor={\"#053FFF\"}\n                        className={\"btn-slide-left\"}\n                    />\n                    <Button title={\"Login\"} variant={\"Text\"} />\n                </div>\n            </div>\n            <div className={\"main-body\"}>\n                <div className={\"main-body-item\"}>\n                    <img src={Circle} alt={\"\"} style={{ width: \"60%\" }} />\n                </div>\n                <div className={\"main-body-item\"}>\n                    <img\n                        src={City}\n                        alt={\"phone city\"}\n                        style={{ width: \"60%\", paddingTop: \"200px\" }}\n                    />\n                </div>\n                <div className={\"floating-text\"}>\n                    <p className={\"floating-text-title\"}>\n                        A modern solution\n                        <br />\n                        to a persistent problem\n                    </p>\n                    <p className={\"floating-text-small\"}>\n                        Create, Connect, Distribute maps among your\n                        <br />\n                        employees and or customers using your\n                        <br />\n                        preexisting cloud storage\n                        <br />\n                        with basic QR codes\n                    </p>\n                    <Button\n                        title={\"Sign Up\"}\n                        variant={\"Outlined\"}\n                        color={\"#053FFF\"}\n                        textColor={\"#053FFF\"}\n                    />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Homepage;\n","import * as React from \"react\";\nimport { CSSProperties, useState } from \"react\";\nimport \"../Css/Button.css\";\n\ninterface ButtonProps {\n    title: string;\n    variant?: \"Text\" | \"Outlined\" | \"Contained\";\n    color?: string;\n    textColor?: string;\n    textSize?: string;\n    style?: CSSProperties;\n    className?: string;\n    onClick?: () => void;\n}\n\nconst Button = ({\n    title,\n    variant,\n    color,\n    textColor,\n    textSize,\n    style,\n    className,\n    onClick,\n}: ButtonProps) => {\n    const [hovered, setHovered] = useState(false);\n    const padding = () => {\n        switch (variant) {\n            case \"Text\":\n                return \"10px 0px\";\n            case \"Contained\":\n                return \"20px 40px\";\n            case \"Outlined\":\n                return \"5px 10px\";\n            default:\n                return \"10px 30px\";\n        }\n    };\n    const backgroundColor = () => {\n        switch (variant) {\n            case \"Contained\":\n                return color;\n            case \"Outlined\": {\n                return hovered ? color : \"\";\n            }\n            default:\n                return \"\";\n        }\n    };\n\n    return (\n        <div\n            role={\"button\"}\n            className={`ButtonBase ${className}`}\n            onMouseEnter={() => setHovered(true)}\n            onMouseLeave={() => setHovered(false)}\n            style={{\n                ...style,\n                border: variant === \"Outlined\" ? `solid 2px ${color}` : \"none\",\n                backgroundColor: backgroundColor(),\n                color: hovered && variant === \"Outlined\" ? \"white\" : textColor,\n                padding: padding(),\n                fontSize: textSize,\n            }}\n            onClick={() => {\n                if (!onClick) return;\n                onClick();\n            }}\n        >\n            {title}\n        </div>\n    );\n};\n\nButton.defaultProps = {\n    variant: \"contained\",\n    color: \"white\",\n    textColor: \"black\",\n    textSize: \"16px\",\n    style: {},\n    className: \"\",\n    onClick: () => {},\n};\n\nexport default Button;\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Css/index.css\";\nimport BuildScreen from \"build-screen\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Homepage } from \"./Components\";\n\nReactDOM.render(\n    <BrowserRouter basename={\"/\"}>\n        <Switch>\n            <Route exact path={\"/\"}>\n                <Homepage />\n            </Route>\n            <Route exact path={\"/build\"}>\n                <BuildScreen />\n            </Route>\n            <Route>\n                <div>error</div>\n            </Route>\n        </Switch>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}